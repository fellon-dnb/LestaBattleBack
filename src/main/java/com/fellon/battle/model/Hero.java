package com.fellon.battle.model;
import java.util.Scanner;
import com.ancevt.d2d2.scene.Node;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@Getter
@AllArgsConstructor
@ToString
public class Hero implements HasCombatStats {
   private String name;
   private final int level;
   private final Attributes attributes;
   private int maxHealth;
   private int currentHealth;
   private CharacterClass —ÅurrentClass;
   private Weapon weapon;
   @Getter
   @Setter
   private Node view;

   @Override
   public void setCurrentHealth(int currentHealth) {
      this.currentHealth = currentHealth;
   }
   public void restoreHealth() {
      setCurrentHealth(getMaxHealth());
   }
   public void levelUp(Scanner scanner, Weapon droppedWeapon) {
      System.out.println("\nüìà –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è!");

      // –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
      System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è:");
      CharacterClass[] classes = CharacterClass.values();
      for (int i = 0; i < classes.length; i++) {
         System.out.println((i + 1) + ". " + classes[i]);
      }

      int classChoice = -1;
      while (classChoice < 1 || classChoice > classes.length) {
         System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞: ");
         if (scanner.hasNextInt()) {
            classChoice = scanner.nextInt();
            scanner.nextLine();
         } else {
            System.out.println("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ.");
            scanner.nextLine();
         }
      }

      CharacterClass newClass = classes[classChoice - 1];
      this.—ÅurrentClass = newClass; // –æ–±–Ω–æ–≤–∏–º —Ç–µ–∫—É—â–∏–π –∫–ª–∞—Å—Å (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Ç—É—Ç –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å "—á–µ—Å—Ç–Ω—ã–π" –º—É–ª—å—Ç–∏–∫–ª–∞—Å—Å)

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
      switch (newClass) {
         case WARRIOR -> attributes.setStrength(attributes.getStrength() + 1);
         case ROGUE -> attributes.setAgility(attributes.getAgility() + 1);
         case BARBARIAN -> attributes.setEndurance(attributes.getEndurance() + 1);
      }

      // –£–≤–µ–ª–∏—á–∏–º —É—Ä–æ–≤–µ–Ω—å –∏ –∑–¥–æ—Ä–æ–≤—å–µ
      int healthPerLevel = newClass.getHealthPerLevel(); // —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ CharacterClass
      maxHealth += healthPerLevel + attributes.getEndurance();
      currentHealth = maxHealth;

      System.out.println("üéØ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: " + (level + 1));
      System.out.println("‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ: " + maxHealth);
      System.out.println("üìä –ê—Ç—Ä–∏–±—É—Ç—ã —Ç–µ–ø–µ—Ä—å: " + attributes);

      // –í—ã–±–æ—Ä: –≤–∑—è—Ç—å –Ω–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä–æ–µ
      System.out.println("–•–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –æ—Ä—É–∂–∏–µ (" + weapon.getName() + ") –Ω–∞ " + droppedWeapon.getName() + "? (–¥–∞/–Ω–µ—Ç)");
      String answer = scanner.nextLine().trim().toLowerCase();
      if (answer.equals("–¥–∞")) {
         weapon = droppedWeapon;
         System.out.println("üî™ –û—Ä—É–∂–∏–µ –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ " + weapon.getName());
      } else {
         System.out.println("üó° –í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ —Ç–µ–∫—É—â–µ–µ –æ—Ä—É–∂–∏–µ.");
      }
   }

}
