package com.fellon.battle.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Battle {
    private State state = State.NON_STARTED;
    private final Hero hero;
    private final Monster monster;
    private Winner winner;
    private final List<BattleListener> listeners = new ArrayList<>();
    private final Random rng = new Random();
    private int turn = 1;

    public Battle(Hero hero, Monster monster) {
        this.hero = hero;
        this.monster = monster;
    }

    public void addListener(BattleListener listener) {
        listeners.add(listener);
    }

    public void removeListener(BattleListener listener) {
        listeners.remove(listener);
    }

    public Winner fight() {
        state = State.IN_PROGRESS;
        fireBattleStart();

        HasCombatStats attacker;
        HasCombatStats defender;

        // –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º: —É –∫–æ–≥–æ –±–æ–ª—å—à–µ –ª–æ–≤–∫–æ—Å—Ç—å; –ø—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ ‚Äî –≥–µ—Ä–æ–π
        if (hero.getAttributes().getAgility() >= monster.getAttributes().getAgility()) {
            attacker = hero;
            defender = monster;
        } else {
            attacker = monster;
            defender = hero;
        }

        while (hero.getCurrentHealth() > 0 && monster.getCurrentHealth() > 0) {
            fireTurnStart(attacker, defender, turn);

            if (attackHits(attacker, defender)) {
                int damage = calculateDamage(attacker, defender);
                applyDamage(defender, damage);
                System.out.println(nameOf(attacker) + " –Ω–∞–Ω–æ—Å–∏—Ç " + damage + " —É—Ä–æ–Ω–∞ " + nameOf(defender));
            } else {
                System.out.println(nameOf(attacker) + " –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è –ø–æ " + nameOf(defender));
            }

            fireTurnEnd(attacker, defender, turn);

            if (defender.getCurrentHealth() <= 0) break;

            // —Å–º–µ–Ω–∞ —Ä–æ–ª–µ–π
            HasCombatStats temp = attacker;
            attacker = defender;
            defender = temp;

            turn++;
        }

        state = State.FINISHED;

        HasCombatStats winnerStats = hero.getCurrentHealth() > 0 ? hero : monster;
        HasCombatStats loserStats  = hero.getCurrentHealth() <= 0 ? hero : monster;

        fireBattleEnd(winnerStats, loserStats);

        winner = (hero.getCurrentHealth() > 0) ? Winner.HERO : Winner.MONSTER;
        return winner;
    }

    // --- combat helpers ---

    // –¢–ó: –±—Ä–æ—Å–æ–∫ 1..(AGI –∞—Ç–∞–∫–µ—Ä–∞ + AGI —Ü–µ–ª–∏); –µ—Å–ª–∏ roll <= AGI —Ü–µ–ª–∏ ‚Äî –ø—Ä–æ–º–∞—Ö
    private boolean attackHits(HasCombatStats attacker, HasCombatStats defender) {
        int max = attacker.getAttributes().getAgility() + defender.getAttributes().getAgility();
        int roll = rng.nextInt(max) + 1; // [1..max]
        return roll > defender.getAttributes().getAgility();
    }

    private int calculateDamage(HasCombatStats attacker, HasCombatStats defender) {
        int weaponDamage = attacker.getWeapon().getDamage();
        int strength     = attacker.getAttributes().getStrength();

        // –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –¥–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
        int finalDamage = weaponDamage + strength;

        // ===== –ö–ª–∞—Å—Å–æ–≤—ã–µ –±–æ–Ω—É—Å—ã –∞—Ç–∞–∫—É—é—â–µ–≥–æ –≥–µ—Ä–æ—è =====
        if (attacker instanceof Hero heroAttacker) {
            CharacterClass cls = heroAttacker.get–°urrentClass();

            switch (cls) {
                case WARRIOR -> {
                    // –ü–æ—Ä—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é: –ø–µ—Ä–≤—ã–π —Ö–æ–¥ ‚Äî –¥–≤–æ–π–Ω–æ–π –£–†–û–ù –û–†–£–ñ–ò–ï–ú (—Å—Ç—Ä–æ–≥–æ –ø–æ –¢–ó)
                    if (turn == 1) {
                        System.out.println("üõ° –í–æ–∏–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ü–æ—Ä—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é! –£—Ä–æ–Ω –æ—Ä—É–∂–∏–µ–º x2.");
                        finalDamage = (weaponDamage * 2) + strength;
                    }
                }
                case ROGUE -> {
                    // –°–∫—Ä—ã—Ç–∞—è –∞—Ç–∞–∫–∞: +1, –µ—Å–ª–∏ –ª–æ–≤–∫–æ—Å—Ç—å –≤—ã—à–µ
                    if (attacker.getAttributes().getAgility() > defender.getAttributes().getAgility()) {
                        System.out.println("üó° –†–∞–∑–±–æ–π–Ω–∏–∫: –°–∫—Ä—ã—Ç–∞—è –∞—Ç–∞–∫–∞ (+1).");
                        finalDamage += 1;
                    }
                }
                case BARBARIAN -> {
                    // –Ø—Ä–æ—Å—Ç—å: —Ö–æ–¥—ã 1..3 => +2, –ø–æ—Ç–æ–º -1
                    if (turn <= 3) {
                        System.out.println("üî• –í–∞—Ä–≤–∞—Ä –≤ —è—Ä–æ—Å—Ç–∏: +2 —É—Ä–æ–Ω–∞.");
                        finalDamage += 2;
                    } else {
                        System.out.println("üò¥ –í–∞—Ä–≤–∞—Ä —É—Å—Ç–∞–ª: -1 —É—Ä–æ–Ω–∞.");
                        finalDamage -= 1;
                    }
                }
            }
        }

        //  –≠—Ñ—Ñ–µ–∫—Ç—ã/—É—è–∑–≤–∏–º–æ—Å—Ç–∏ —Ü–µ–ª–∏-–≥–µ—Ä–æ—è
        if (defender instanceof Hero heroDefender) {
            CharacterClass cls = heroDefender.get–°urrentClass();

            // –í–æ–∏–Ω (—â–∏—Ç): -3 –∫ –ø–æ–ª—É—á–∞–µ–º–æ–º—É —É—Ä–æ–Ω—É, –µ—Å–ª–∏ —Å–∏–ª–∞ –≤–æ–∏–Ω–∞ > —Å–∏–ª—ã –∞—Ç–∞–∫—É—é—â–µ–≥–æ
            if (cls == CharacterClass.WARRIOR) {
                if (heroDefender.getAttributes().getStrength() > attacker.getAttributes().getStrength()) {
                    System.out.println("üõ° –í–æ–∏–Ω –±–ª–æ–∫–∏—Ä—É–µ—Ç —â–∏—Ç–æ–º: -3 –∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É —É—Ä–æ–Ω—É.");
                    finalDamage = Math.max(0, finalDamage - 3);
                }
            }
        }

        //  –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–Ω—Å—Ç—Ä–æ–≤
        if (defender instanceof Monster defMonster) {
            String defName = defMonster.getName().toLowerCase();

            // –°–∫–µ–ª–µ—Ç: –ø–æ–ª—É—á–∞–µ—Ç x2 –æ—Ç –¥—Ä–æ–±—è—â–µ–≥–æ
            if (defName.contains("—Å–∫–µ–ª–µ—Ç")
                    && attacker.getWeapon().getDamageType() == DamageType.BLUDGEONING) {
                System.out.println("üíÄ –°–∫–µ–ª–µ—Ç —É—è–∑–≤–∏–º –∫ –¥—Ä–æ–±—è—â–µ–º—É: —É—Ä–æ–Ω x2.");
                finalDamage *= 2;
            }

            // –°–ª–∞–π–º: —Ä—É–±—è—â–µ–µ –û–†–£–ñ–ò–ï –Ω–µ –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω (–Ω–æ —Å–∏–ª–∞ –∏ –ø—Ä–æ—á–∏–µ –±–æ–Ω—É—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç)
            if (defName.contains("—Å–ª–∞–π–º")
                    && attacker.getWeapon().getDamageType() == DamageType.SLASHING) {
                System.out.println("üß™ –°–ª–∞–π–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Ä—É–±—è—â–µ–µ –æ—Ä—É–∂–∏–µ: —É—Ä–æ–Ω –æ—Ä—É–∂–∏–µ–º = 0.");
                // –ø–µ—Ä–µ—Å—á—ë—Ç: —Ç–æ–ª—å–∫–æ —Å–∏–ª–∞ + —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–æ–≤—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã, –≤—ã—á—Ç—è –≤–∫–ª–∞–¥ –æ—Ä—É–∂–∏—è
                finalDamage -= attacker.getWeapon().getDamage();
                finalDamage = Math.max(finalDamage, strength); // –º–∏–Ω–∏–º—É–º —Å–∏–ª–∞ (–µ—Å–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —É—à–ª–∏ –≤ –º–∏–Ω—É—Å)
            }

            // –ì–æ–ª–µ–º: –ö–∞–º–µ–Ω–Ω–∞—è –∫–æ–∂–∞ ‚Äî —Å–Ω–∏–∂–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º—ã–π —É—Ä–æ–Ω –Ω–∞ —Å–≤–æ—é –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
            if (defName.contains("–≥–æ–ª–µ–º")) {
                int reduce = defMonster.getAttributes().getEndurance();
                if (reduce > 0) {
                    System.out.println("ü™® –ì–æ–ª–µ–º: –ö–∞–º–µ–Ω–Ω–∞—è –∫–æ–∂–∞ (-" + reduce + ").");
                    finalDamage = Math.max(0, finalDamage - reduce);
                }
            }
        }

        if (attacker instanceof Monster atkMonster) {
            String atkName = atkMonster.getName().toLowerCase();

            // –ü—Ä–∏–∑—Ä–∞–∫: –°–∫—Ä—ã—Ç–∞—è –∞—Ç–∞–∫–∞ –∫–∞–∫ —É —Ä–∞–∑–±–æ–π–Ω–∏–∫–∞ 1 —É—Ä–æ–≤–Ω—è
            if (atkName.contains("–ø—Ä–∏–∑—Ä–∞–∫")) {
                if (attacker.getAttributes().getAgility() > defender.getAttributes().getAgility()) {
                    System.out.println("üëª –ü—Ä–∏–∑—Ä–∞–∫ –±—å—ë—Ç –∏–∑ —Ç–µ–Ω–∏: +1 —É—Ä–æ–Ω.");
                    finalDamage += 1;
                }
            }

            // –î—Ä–∞–∫–æ–Ω: –∫–∞–∂–¥—ã–π 3-–π —Ö–æ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ +3 —É—Ä–æ–Ω–∞ (–¥—ã—Ö–∞–Ω–∏–µ –æ–≥–Ω—ë–º)
            if (atkName.contains("–¥—Ä–∞–∫–æ–Ω") && (turn % 3 == 0)) {
                System.out.println("üî• –î—Ä–∞–∫–æ–Ω –¥—ã—à–∏—Ç –æ–≥–Ω—ë–º: +3 —É—Ä–æ–Ω–∞.");
                finalDamage += 3;
            }
        }

        return Math.max(finalDamage, 0);
    }

    private void applyDamage(HasCombatStats target, int damage) {
        target.setCurrentHealth(Math.max(0, target.getCurrentHealth() - damage));
    }

    //  events

    private void fireBattleStart() {
        for (BattleListener listener : listeners) {
            listener.onBattleStarted(this);
        }
    }

    private void fireTurnStart(HasCombatStats attacker, HasCombatStats defender, int turn) {
        for (BattleListener listener : listeners) {
            listener.onTurnStarted(this, attacker, defender, turn);
        }
    }

    private void fireTurnEnd(HasCombatStats attacker, HasCombatStats defender, int turn) {
        for (BattleListener listener : listeners) {
            listener.onTurnEnded(this, attacker, defender, turn);
        }
    }

    private void fireBattleEnd(HasCombatStats winner, HasCombatStats loser) {
        for (BattleListener listener : listeners) {
            listener.onBattleEnded(this, winner, loser);
        }
    }

    //  util

    private String nameOf(HasCombatStats unit) {
        if (unit instanceof Hero h) return h.getName();
        if (unit instanceof Monster m) return m.getName();
        return unit.toString();
    }
}
