package com.fellon.battle.model;

import java.util.List;
import java.util.ArrayList;
import java.util.Random;

public class Battle {
    private State state = State.NON_STARTED;
    private final Hero hero;
    private final Monster monster;
    private Winner winner;
    private final List<BattleListener> listeners = new ArrayList<>();
    private int turn = 1;

    public Battle(Hero hero, Monster monster) {
        this.hero = hero;
        this.monster = monster;
    }

    public void addListener(BattleListener listener) {
        listeners.add(listener);
    }

    public void removeListener(BattleListener listener) {
        listeners.remove(listener);
    }

    public Winner fight() {
        state = State.IN_PROGRESS;
        fireBattleStart();

        HasCombatStats attacker;
        HasCombatStats defender;

        if (hero.getAttributes().getAgility() >= monster.getAttributes().getAgility()) {
            attacker = hero;
            defender = monster;
        } else {
            attacker = monster;
            defender = hero;
        }

        while (hero.getCurrentHealth() > 0 && monster.getCurrentHealth() > 0) {
            fireTurnStart(attacker, defender, turn);

            if (attackHits(attacker, defender)) {
                int damage = calculateDamage(attacker, defender);
                applyDamage(defender, damage);
                System.out.println(attacker.getName() + " –Ω–∞–Ω–æ—Å–∏—Ç " + damage + " —É—Ä–æ–Ω–∞ " + defender.getName());
            } else {
                System.out.println(attacker.getName() + " –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è –ø–æ " + defender.getName());
            }

            fireTurnEnd(attacker, defender, turn);

            if (defender.getCurrentHealth() <= 0) break;

            // –ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏
            HasCombatStats temp = attacker;
            attacker = defender;
            defender = temp;

            turn++;
        }

        state = State.FINISHED;

        HasCombatStats winnerStats = hero.getCurrentHealth() > 0 ? hero : monster;
        HasCombatStats loserStats = hero.getCurrentHealth() <= 0 ? hero : monster;

        fireBattleEnd(winnerStats, loserStats);

        winner = (hero.getCurrentHealth() > 0) ? Winner.HERO : Winner.MONSTER;
        return winner;
    }

    private boolean attackHits(HasCombatStats attacker, HasCombatStats defender) {
        int max = attacker.getAttributes().getAgility() + defender.getAttributes().getAgility();
        int roll = new Random().nextInt(max + 1);
        return roll > defender.getAttributes().getAgility();
    }

    private int calculateDamage(HasCombatStats attacker, HasCombatStats defender) {
        int base = attacker.getWeapon().getDamage() + attacker.getAttributes().getStrength();
        int finalDamage = base;

        //—Å–ø–µ—Ü—ç—Ñ—Ñ–µ–∫—Ç—ã –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∫–ª–∞—Å—Å–∞
        if (attacker instanceof Hero heroAttacker) {
            CharacterClass currentClass = heroAttacker.get–°urrentClass();

            switch (currentClass) {
                case WARRIOR -> {
                    // –ü–æ—Ä—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
                    if (turn == 1 && attacker == heroAttacker) {
                        System.out.println("üõ° –í–æ–∏–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ü–æ—Ä—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é! –£—Ä–æ–Ω —É–¥–≤–∞–∏–≤–∞–µ—Ç—Å—è.");
                        finalDamage *= 2;
                    }
                }
                case ROGUE -> {
                    // –°–∫—Ä—ã—Ç–∞—è –∞—Ç–∞–∫–∞
                    if (attacker.getAttributes().getAgility() > defender.getAttributes().getAgility()) {
                        System.out.println("üó° –†–∞–∑–±–æ–π–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –°–∫—Ä—ã—Ç—É—é –∞—Ç–∞–∫—É! +1 —É—Ä–æ–Ω.");
                        finalDamage += 1;
                    }
                }
                case BARBARIAN -> {
                    // –Ø—Ä–æ—Å—Ç—å
                    if (turn <= 3) {
                        System.out.println("üî• –í–∞—Ä–≤–∞—Ä –≤ —è—Ä–æ—Å—Ç–∏! +2 —É—Ä–æ–Ω–∞.");
                        finalDamage += 2;
                    } else {
                        System.out.println("üò¥ –Ø—Ä–æ—Å—Ç—å –ø—Ä–æ—à–ª–∞. -1 —É—Ä–æ–Ω.");
                        finalDamage -= 1;
                    }
                }
            }
        }

        // –≠—Ñ—Ñ–µ–∫—Ç—ã –∑–∞—â–∏—Ç—ã —Ü–µ–ª–µ–π
        if (defender instanceof Hero heroDefender) {
            CharacterClass currentClass = heroDefender.get–°urrentClass();

            if (currentClass == CharacterClass.WARRIOR) {
                if (heroDefender.getAttributes().getStrength() > attacker.getAttributes().getStrength()) {
                    System.out.println("üõ° –í–æ–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –©–∏—Ç! -3 –∫ –ø–æ–ª—É—á–∞–µ–º–æ–º—É —É—Ä–æ–Ω—É.");
                    finalDamage = Math.max(0, finalDamage - 3);
                }
            }
        }

        //  –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –º–æ–Ω—Å—Ç—Ä–æ–≤
        if (defender instanceof Monster m) {
            String name = m.getName().toLowerCase();
            if (name.contains("—Å–∫–µ–ª–µ—Ç") && attacker.getWeapon().getDamageType() == DamageType.BLUDGEONING) {
                System.out.println("üíÄ –°–∫–µ–ª–µ—Ç —É—è–∑–≤–∏–º –∫ –¥—Ä–æ–±—è—â–µ–º—É —É—Ä–æ–Ω—É! –£—Ä–æ–Ω x2.");
                finalDamage *= 2;
            }

            if (name.contains("—Å–ª–∞–π–º") && attacker.getWeapon().getDamageType() == DamageType.SLASHING) {
                System.out.println("üß™ –°–ª–∞–π–º –Ω–µ–≤–æ—Å–ø—Ä–∏–∏–º—á–∏–≤ –∫ —Ä—É–±—è—â–µ–º—É —É—Ä–æ–Ω—É! –°—á–∏—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–∏–ª–∞.");
                finalDamage = attacker.getAttributes().getStrength();
            }
        }

        return Math.max(finalDamage, 0);
    }

    private void applyDamage(HasCombatStats target, int damage) {
        target.setCurrentHealth(Math.max(0, target.getCurrentHealth() - damage));
    }

    private void fireBattleStart() {
        for (BattleListener listener : listeners) {
            listener.onBattleStarted(this);
        }
    }

    private void fireTurnStart(HasCombatStats attacker, HasCombatStats defender, int turn) {
        for (BattleListener listener : listeners) {
            listener.onTurnStarted(this, attacker, defender, turn);
        }
    }

    private void fireTurnEnd(HasCombatStats attacker, HasCombatStats defender, int turn) {
        for (BattleListener listener : listeners) {
            listener.onTurnEnded(this, attacker, defender, turn);
        }
    }

    private void fireBattleEnd(HasCombatStats winner, HasCombatStats loser) {
        for (BattleListener listener : listeners) {
            listener.onBatttleEnded(this, winner, loser);
        }
    }
}
